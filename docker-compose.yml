version: "3.3"

services:
  # client:
  #   container_name: client
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.client
  #     args:
  #       CLIENT_PORT: ${CLIENT_PORT}
  #   restart: always
  #   depends_on:
  #     - postgres
  #   ports:
  #     - "${CLIENT_PORT}:${CLIENT_PORT}"
  #   environment:
  #     CLIENT_PORT: ${CLIENT_PORT}
  #   env_file:
  #     ./.env.sample
  #   networks:
  #     - network_bridge

  postgres:
    image: postgres:14
    ports:
      - "8432:${POSTGRES_PORT}"
    volumes:
      - ./postgresdata:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    env_file:
      ./.env.sample
    healthcheck:
      test: ["CMD", "pg_isready" ,"--dbname=postgres", "--host=localhost", "--port=5432", "--username=postgres"]
      interval: 10s
      retries: 2
      start_period: 20s
      timeout: 10s
    networks:
      - network_bridge
  
  ssrapp:
    container_name: ssrapp
    build:
      context: .
      dockerfile: Dockerfile.server
      args:
        SERVER_PORT: ${SERVER_PORT}
    image: punydevil/re4m_game-ssrapp
    depends_on:
      postgres:
        condition: service_healthy
    restart: always
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    environment:
      - SERVER_PORT=${SERVER_PORT}
    env_file:
      ./.env.sample
    networks:
      - network_bridge

  nginx:
    container_name: nginx
    build:
      context: .
      dockerfile: Dockerfile.nginx
      args:
        SERVER_PORT: 80
    image: punydevil/re4m_game-nginx
    depends_on:
      - ssrapp
    restart: always
    ports:
      - "80:80"
      - "443:443"
    networks:
      - network_bridge

networks:
  network_bridge:
    driver: bridge